[gd_scene load_steps=42 format=2]

[ext_resource path="res://addons/SDK/Scripts/Common/Character/RPGSystem/CharacterEffects.gd" type="Script" id=1]
[ext_resource path="res://Modules/Core/Prefabs/PlayerController/PlayerController.gd" type="Script" id=2]
[ext_resource path="res://Modules/Core/Prefabs/PlayerController/Scripts/FSM/MovementStates/JumpingState.gd" type="Script" id=3]
[ext_resource path="res://Modules/Core/Prefabs/PlayerController/Scripts/FSM/MovementStates/OnGroundState.gd" type="Script" id=4]
[ext_resource path="res://Modules/Core/Prefabs/PlayerController/Scripts/FSM/FSM_Player_movement.gd" type="Script" id=5]
[ext_resource path="res://Modules/Core/Prefabs/PlayerController/Scripts/FSM/MovementStates/MovingState.gd" type="Script" id=6]
[ext_resource path="res://Modules/Core/Prefabs/PlayerController/Scripts/FSM/MovementStates/FallingState.gd" type="Script" id=7]
[ext_resource path="res://Modules/Core/Prefabs/PlayerController/Scripts/FSM/MovementStates/Sprint.gd" type="Script" id=8]
[ext_resource path="res://Modules/Core/Prefabs/PlayerController/Scripts/FSM/Camera_FSM.gd" type="Script" id=9]
[ext_resource path="res://Modules/Core/Prefabs/PlayerController/Scripts/FSM/CameraStates/third_person_state.gd" type="Script" id=10]
[ext_resource path="res://addons/SDK/Scripts/Common/Item/Container/ItemContainer.gd" type="Script" id=11]
[ext_resource path="res://Modules/Core/Prefabs/PlayerController/Scripts/FSM/CameraStates/free_cam_state.gd" type="Script" id=12]
[ext_resource path="res://Modules/Core/Prefabs/PlayerController/Scripts/FSM/CameraStates/First_Person.gd" type="Script" id=13]
[ext_resource path="res://addons/SDK/Scripts/Common/Combat/Combat_Script.gd" type="Script" id=14]
[ext_resource path="res://Modules/Core/UI/Theme/UI_Theme.tres" type="Theme" id=15]
[ext_resource path="res://Modules/Core/UI/Textures/BackgroundNoBorders.dds" type="Texture" id=16]
[ext_resource path="res://Modules/Core/UI/Textures/cell.dds" type="Texture" id=17]

[sub_resource type="RayShape" id=14]

[sub_resource type="GDScript" id=21]
script/source = "extends RayCast

signal started_looking_at(object)
signal looking_at(object)
signal stopped_looking_at(object)

var has_collided:bool = false

var collider

func _physics_process(delta):
	collider = get_collider()
	if collider != null:
		emit_signal(\"looking_at\",collider)
"

[sub_resource type="CapsuleShape" id=1]

[sub_resource type="CapsuleMesh" id=5]

[sub_resource type="GDScript" id=10]
script/source = "extends Control
#either menu or inventory/quest/etc opened
var is_ui_opened:bool = false

onready var CharacterUI:Control = $CharacterWindow
onready var Hud:Control = $Hud
onready var Menu:Control = $Menus
enum ui{MENU,CHARACTER,NONE}
var currently_opened = ui.NONE
func _ready():
	pass

func _process(delta):
	if Input.is_action_just_pressed(\"ui_cancel\"):
		if is_ui_opened:#если UI открыт
			if currently_opened == ui.MENU: #Что именно открыто
				Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
				Menu.visible = false
				Hud.visible = true
				is_ui_opened = false
				currently_opened = ui.NONE
				get_tree().set_pause(false)
		else:
			if currently_opened == ui.NONE:
				Menu.visible = true
				is_ui_opened = true
				Hud.visible = false
				currently_opened = ui.MENU
				get_tree().set_pause(true)
				Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
	if Input.is_action_just_pressed(\"ui_inventory\"):
		if is_ui_opened:
			if currently_opened == ui.CHARACTER:
				CharacterUI.hide()
				currently_opened = ui.NONE
				is_ui_opened = false
		else:
			CharacterUI.show()
			print($CharacterWindow/TabContainer/Inventory)
#			$CharacterWindow/TabContainer/Inventory.fill_inventory(get_parent().find_node(\"item_container\").items)
			currently_opened = ui.CHARACTER
			is_ui_opened = true
			

func close_all_menus():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	Menu.visible = false
	Hud.visible = true
	is_ui_opened = false
	currently_opened = ui.NONE
	get_tree().set_pause(false)
"

[sub_resource type="GDScript" id=17]
script/source = "extends Control

#for tracking attack angle
onready var label:Label =$Label

onready var dirlab:Label = $Label2


func _on_combat_angle_changed(angle):
	label.text = \"Current Attack Angle: \" + (angle as String)


func _on_combat_melee_attack_direction_changed(attack_direction):
	dirlab.text = \"Current attack direction\" + (attack_direction as String)
"

[sub_resource type="GDScript" id=3]
script/source = "extends Control

var health_bar:Range
var stamina_bar:Range
var mana_bar:Range

var left_angle_slider:Slider
var right_angle_slider:Slider

var null_texture:ImageTexture

var pl_data:Node

func _ready():
	pl_data = get_parent().get_parent().find_node(\"player_character_data\")
	
	mana_bar = find_node(\"ManaBar\")

	stamina_bar = find_node(\"StaminaBar\")

	health_bar = find_node(\"HealthBar\")

	left_angle_slider = $crosshair/ch_melee/left_angle_slider
	right_angle_slider = $crosshair/ch_melee/right_angle_slider
	
	null_texture = ImageTexture.new()

func _process(delta):
	mana_bar.value = pl_data.current_mana/pl_data.max_mana
	stamina_bar.value = pl_data.current_stamina/pl_data.max_st
	health_bar.value = pl_data.current_hp/pl_data.max_hp

func _on_pl_data_level_up():
	pass

func set_current_strike_direction(direction):
	if direction == CombatScript.melee_attack_direction.ATTACK_RIGHT:
		left_angle_slider.set(\"custom_icons/grabber_disabled\",null_texture)
		right_angle_slider.set(\"custom_icons/grabber_disabled\",null)
	elif direction == CombatScript.melee_attack_direction.ATTACK_LEFT:
		left_angle_slider.set(\"custom_icons/grabber_disabled\",null)
		right_angle_slider.set(\"custom_icons/grabber_disabled\",null_texture)


func _on_combat_angle_changed(angle):
	left_angle_slider.value = angle/45
	right_angle_slider.value = angle/45


func _on_combat_melee_attack_direction_changed(attack_direction):
	set_current_strike_direction(attack_direction)
"

[sub_resource type="StyleBoxFlat" id=6]
bg_color = Color( 0, 0.164706, 1, 1 )

[sub_resource type="StyleBoxFlat" id=7]
bg_color = Color( 0.141176, 0.811765, 0, 1 )

[sub_resource type="StyleBoxFlat" id=8]
bg_color = Color( 0.623529, 0, 0, 1 )

[sub_resource type="ImageTexture" id=15]

[sub_resource type="StyleBoxEmpty" id=19]

[sub_resource type="StyleBoxEmpty" id=20]

[sub_resource type="GDScript" id=23]
script/source = "extends Control

func _ready():
	pass
"

[sub_resource type="StyleBoxTexture" id=26]
texture = ExtResource( 16 )
region_rect = Rect2( 0, 0, 1024, 1024 )

[sub_resource type="StyleBoxTexture" id=25]
texture = ExtResource( 16 )
region_rect = Rect2( 0, 0, 1024, 1024 )

[sub_resource type="StyleBoxTexture" id=24]
texture = ExtResource( 16 )
region_rect = Rect2( 0, 0, 1024, 1024 )

[sub_resource type="StyleBoxTexture" id=28]
texture = ExtResource( 17 )
region_rect = Rect2( 0, 0, 1, 1 )
axis_stretch_horizontal = 2
axis_stretch_vertical = 2

[sub_resource type="GDScript" id=27]
script/source = "tool
extends Container

func _process(delta):
	
	pass
"

[sub_resource type="GDScript" id=18]
script/source = "extends Control



func _on_continue_button_down():
	find_parent(\"UI\").close_all_menus()
	#Tested some native code
	var ddd = load(\"res://simple.gdns\").new()
	print(ddd.get_data())

func _on_Exit_button_down():
	pass # Replace with function body.


func _on_ToMenu_button_down():
	pass # Replace with function body.
"

[sub_resource type="GDScript" id=16]
script/source = "#Node for applying player input
extends Node
onready var combat = $combat
var allowed_move = 5
#To be rewritten when inventory system and different types of weapons are done
#TODO charge of weapon aka strong attack
#Возможно, будет State-machine
func _input(event):
	if event is InputEventMouseMotion:
		combat.side_attack_angle += -clamp(event.relative.y,-45,45)
		#Примерно так
		#Проверить, какое движение было более сильным
		#и на основании этого делать ветвление
		if event.relative.x < -allowed_move:#-1,1
			combat.attack_direction = CombatScript.melee_attack_direction.ATTACK_LEFT
		#	print(\"left\")
		elif event.relative.x > allowed_move:
			combat.attack_direction = CombatScript.melee_attack_direction.ATTACK_RIGHT
		#	print(\"right\")
	
	if event is InputEventMouseButton:
		if Input.is_action_pressed(\"primary_attack\"):
			if combat.side_attack_angle >= 45:
				combat.attack_direction = CombatScript.melee_attack_direction.ATTACK_UP
	
"

[sub_resource type="Curve" id=12]
_data = [ Vector2( 0, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 0 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="GDScript" id=4]
script/source = "#Controls characters stats
#Probably placeholder and will be rewritten
extends Node

const lvl_prog_cost = 2000
const max_lvl = 20

var character_name:String
var character_surname:String
var character_alias:String

var cur_level = 1
var cur_exp
var exp_req_for_lvl

var is_alive:bool = true


var max_hp:int = 200
var current_hp:float = 100 setget set_hp, get_hp
var base_regen_hp:float = 1

var max_st:int = 200
var current_stamina:float = 100 setget set_stamina, get_stamina
var base_regen_stamina:float = 1

var max_mana:int = 200
var current_mana:float = 100 setget set_mana, get_mana
var base_regen_mana:float = 1

var movement_speed_base_mod:float = 1.5


var effects_node:Node
signal experience_gained()
signal level_up()
signal player_died(player)
#TODO
#Все навыки
#Скилы
#Перки
#


func _ready():
	cur_exp = 0
	exp_req_for_lvl = cur_level * lvl_prog_cost
	#make sure node is never renamed!
	assert(self.name == \"player_character_data\")
	effects_node = find_node(\"character_effects_node\")
	
func _process(_delta):
	set_hp(get_hp_regen_rate())
	set_stamina(get_stamina_regen_rate())
	set_mana(get_mana_regen_rate())
#base values setters/getters

func add_exp(expr:int):
	cur_exp = cur_exp + expr
	emit_signal(\"exp_gained\")
	if cur_exp >= exp_req_for_lvl:
		cur_level = cur_level + 1
		exp_req_for_lvl = cur_level * lvl_prog_cost
		max_hp = max_hp + 200
		max_st = max_st + 200
		max_mana = max_mana + 200
		emit_signal(\"level_up\")

func set_hp(hp:float):
	if hp + current_hp >= max_hp:
		current_hp = max_hp
	elif hp + current_hp < max_hp:
		current_hp = current_hp + hp
	elif current_hp + hp < 0:
		current_hp = 0
		emit_signal(\"died\")

func get_hp():return current_hp

func set_stamina(st:float):
	if st + current_stamina >= max_st:
		current_stamina = max_st
	elif st + current_stamina < max_st:
		current_stamina = current_stamina + st
	elif st + current_stamina < 0:
		current_stamina = 0

func get_stamina(): return current_stamina

func set_mana(mn:float):
	if mn + current_mana >= max_mana:
		current_mana = max_mana
	elif mn + current_mana < max_mana:
		current_mana = current_mana + mn
	elif mn + current_mana < 0:
		current_mana = 0
func get_mana(): return current_mana

#gathers all data about regen rates
func get_hp_regen_rate()->float:
	return base_regen_hp
func get_mana_regen_rate()->float:
	return base_regen_mana
func get_stamina_regen_rate()->float:
	return base_regen_stamina
	

func get_movement_modifier()->float:
	return 0.0

#для рференса
#extends RigidBody
#class_name PlayerController
#var playerState:PlayerState
#
#export var WalkingSpeed:float
#export var RunningSpeed:float
#export var SprintingSpeed:float
#export var CrouchingSpeed:float
#export var JumpSpeed:float = 3
#export var RunWalkState:bool = true # true = run
#onready var camera:Camera = get_node(\"Camera\")
#onready var cameraArm = get_node(\"CameraArm\")
#
#var rightHand
#var leftHand
#
#onready var Leg = get_node(\"Leg\")
#
####TODO Добавить модификаторы от навыков
##todo Камера от первого/третьего лица + свободная камера
##Доп состояния - плавание
##Доп состояние - паркур
##Исправить залипание SleepingState
#
#
#signal OnPlayerStateChanged
#
#func _ready():
#	playerState = StandingState.new()
#	playerState.OnEnter(self)
#
#
#func _process(delta):
#	if Input.is_action_just_pressed(\"Switch_Run_walk\"):
#		RunWalkState = !RunWalkState
#	var tempState = playerState.Process(delta)
#	if tempState != null:
#		playerState.OnExit()
#		playerState = tempState
#		playerState.OnEnter(self)
#		print(\"State changed\")
#		emit_signal(\"OnPlayerStateChanged\")
#
#	if Input.is_action_just_pressed(\"Kick\"):
#		Leg.Kick()
#
#
#func _physics_process(delta):
#	playerState.PhysicProcess(delta)
#
#func _input(event):
#	if event is InputEventMouseMotion:
#		#camera.rotate_x(event.relative.x)
#		#camera.rotate_y(event.relative.y)
#		pass
####TODO
##Написать управление камерой
##возможно, через отдельный FSM
#
################################
################################
#### 						####
####  Finite State Machine  ####
#### 						####
################################
################################
#class PlayerState:
#	var velocity:Vector3
#	var YVel:float
#	var currentSpeedMod:float
#	var body:PlayerController
#	const Epsilon:float = -0.0001
#	func _init():
#		velocity = Vector3.ZERO
#		YVel = 0
#		currentSpeedMod = 0
#
#	func OnEnter(_body:PlayerController):
#		body = _body
#
#	func OnExit():
#		body = null
#
#	func Process(delta):
#		pass
#	func PhysicProcess(delta):
#		pass
#	func GetCameraInput(input):
#		pass
#	func CalculateFinalSpeedModifier():
#		return 0
#
#class StandingState extends PlayerState:
#	func OnEnter(_body:PlayerController):
#		body = _body
#		body.set_linear_damp(10)
#		print(\"Standing\")
#		print(body.get_linear_velocity())
#
#	func Process(delta):
#
#		if YVel < Epsilon:
#			return FallingState.new()
#		if Input.is_action_pressed(\"move_forward\") or Input.is_action_pressed(\"move_back\") or Input.is_action_pressed(\"move_left\") or Input.is_action_pressed(\"move_right\"):
#			if body.RunWalkState: # is running in this case
#				if Input.is_action_pressed(\"walk_run\"):
#					return WalkingState.new()
#				elif Input.is_action_pressed(\"Sprint\"):
#					return SprintingState.new()
#				return RunningState.new()
#			else:			#is walking in this case
#				if Input.is_action_pressed(\"walk_run\"):
#					return RunningState.new()
#				return WalkingState.new()
#		if Input.is_action_just_pressed(\"jump\"):
#			return JumpingState.new()
#
#		return null
#
#	func PhysicProcess(delta):
#		YVel = body.get_linear_velocity().y
#		if Vector3.ZERO != velocity:
#			velocity *= delta * 100 * currentSpeedMod
#			velocity.y += YVel
#			body.set_linear_velocity(velocity)
#			print(body.is_sleeping())
#
#class WalkingState extends StandingState:
#	func OnEnter(_body:PlayerController):
#		velocity = Vector3.ZERO
#		body = _body
#		currentSpeedMod = _body.WalkingSpeed
#		body.set_linear_damp(10)
#		if body.is_sleeping():
#			body.set_sleeping(false)
#		print(\"walking\")
#
#	func Process(delta):
#		velocity = Vector3.ZERO
#		if body.is_sleeping():
#			printerr(\"Sleeping state when there is no need!\")
#		if Input.is_action_pressed(\"walk_run\"):
#			return RunningState.new()
#
#		if Input.is_action_pressed(\"move_forward\"):
#			velocity += Vector3.FORWARD
#		elif Input.is_action_pressed(\"move_back\"):
#			velocity += Vector3.BACK
#		if Input.is_action_pressed(\"move_left\"):
#			velocity += Vector3.LEFT
#		elif Input.is_action_pressed(\"move_right\"):
#			velocity += Vector3.RIGHT
#		if Input.is_action_pressed(\"jump\"):
#			return JumpingState.new()
#
#		if body.RunWalkState:
#			return RunningState.new()
#		#Эти If вместе и В ТАКОМ ПОРЯДКЕ потому что так надо
#		if velocity != Vector3.ZERO:
#			return null
#		if body.get_linear_velocity().is_equal_approx(Vector3.ZERO):
#			print(\"something is going on here\")
#			return StandingState.new()
#
#		return null
#
#class RunningState extends StandingState:
#	func OnEnter(_body:PlayerController):
#		velocity = Vector3.ZERO
#		body = _body
#		currentSpeedMod = _body.RunningSpeed
#		body.set_linear_damp(10)
#		if body.is_sleeping():
#			body.set_sleeping(false)
#		print(\"running\")
#	func Process(delta):
#		velocity = Vector3.ZERO
#
#		if YVel < Epsilon:
#			return FallingState.new()
#		if Input.is_action_pressed(\"walk_run\"):
#			return WalkingState.new()
#
#		if Input.is_action_pressed(\"move_forward\"):
#			velocity += Vector3.FORWARD
#		elif Input.is_action_pressed(\"move_back\"):
#			velocity += Vector3.BACK
#		if Input.is_action_pressed(\"move_left\"):
#			velocity += Vector3.LEFT
#		elif Input.is_action_pressed(\"move_right\"):
#			velocity += Vector3.RIGHT
#
#		if Input.is_action_just_pressed(\"jump\"):
#			return JumpingState.new()
#
#		if !body.RunWalkState:
#			return WalkingState.new()
#
#		if Input.is_action_pressed(\"Sprint\"):
#			return SprintingState.new()
#		#Эти If вместе и В ТАКОМ ПОРЯДКЕ потому что так надо
#		if velocity != Vector3.ZERO:
#			return null
#		if body.get_linear_velocity().is_equal_approx(Vector3.ZERO):
#			print(\"something is going on here\")
#			return StandingState.new()
#
#
#		return null
#
#
#
#class SprintingState extends RunningState:
#	func OnEnter(_body:PlayerController):
#		velocity = Vector3.ZERO
#		body = _body
#		currentSpeedMod = _body.SprintingSpeed
#		_body.set_linear_damp(10)
#		if _body.is_sleeping():
#			_body.set_sleeping(false)
#		print(\"Sprinting\")
#
#	func Process(delta):
#		velocity = Vector3.ZERO
#		if YVel < Epsilon:
#			return FallingState.new()
#
#		if body.is_sleeping():
#			printerr(\"Sleeping state when there is no need!\")	
#
#		if Input.is_action_pressed(\"move_forward\"):
#			velocity += Vector3.FORWARD
#		elif Input.is_action_pressed(\"move_back\"):
#			velocity += Vector3.BACK
#		if Input.is_action_pressed(\"move_left\"):
#			velocity += Vector3.LEFT
#		elif Input.is_action_pressed(\"move_right\"):
#			velocity += Vector3.RIGHT
#
#		if Input.is_action_pressed(\"jump\"):
#			return JumpingState.new()
#
#		if !body.RunWalkState:
#			return WalkingState.new()
#
#		#Эти If вместе и В ТАКОМ ПОРЯДКЕ потому что так надо
#		if velocity == Vector3.ZERO:
#			return null	
#		if body.get_linear_velocity().is_equal_approx(Vector3.ZERO):
#			print(\"or here\")
#			return StandingState.new()
#
#		return null
#
#class JumpingState extends PlayerState:
#	var HasJumped:bool = false
#
#	func OnEnter(_body:PlayerController):
#		body = _body
#		currentSpeedMod = body.JumpSpeed
#		_body.set_linear_damp(-1)
#		print(\"jumped\")
#
#	func OnExit():
#		body = null
#
#
#	func Process(delta):
#		if YVel < Epsilon:
#			return FallingState.new()
#		elif YVel >= 0:
#			return null
#		return null
#	func PhysicProcess(delta):
#		YVel = body.get_linear_velocity().y
#		if !HasJumped:
#			body.apply_impulse(body.get_linear_velocity(),Vector3.UP * currentSpeedMod * 100 * delta)
#			HasJumped = true
#
#
#class FallingState extends PlayerState:
#	func OnEnter(_body:PlayerController):
#		body = _body
#		currentSpeedMod = body.JumpSpeed
#		body.set_linear_damp(-1)
#		body.physics_material_override.bounce = 0
#		print(\"falling\")
#	func OnExit():
#		body.physics_material_override.bounce  = 0.01
#		body.set_sleeping(false)
#		body = null
#		print(\"exiting falling state!\")
#
#	func Process(delta):
#		if YVel >= Epsilon:
#			return StandingState.new()
#		print(body.get_linear_velocity())
#		return null
#
#	func PhysicProcess(delta):
#		YVel = body.get_linear_velocity().y
#		if body.get_linear_velocity().is_equal_approx(Vector3.ZERO):
#			#body.set_sleeping(true)
#			#print(\"sleeping state is on!\")
#			pass
"

[sub_resource type="GDScript" id=22]
script/source = "extends Node

onready var item_container:ItemContainerBase = $item_container



func add_item(item_ref:ItemInstance):
	item_container.add_item(item_ref)
func get_inventory():
	pass
func drop_item():
	pass
func drop_item_index(index):
	item_container.drop_item_index(index,get_parent().translation,get_parent().get_parent_spatial())
	
	
func _on_RayCast_looking_at(item):
	if Input.is_action_just_pressed(\"action\"):
		if item is ItemOnGround:
			item.add_item_to_container(item_container)
"

[node name="Player" type="KinematicBody"]
process_priority = 1
collision_mask = 3
script = ExtResource( 2 )
__meta__ = {
"_edit_lock_": true
}

[node name="SpringArm" type="SpringArm" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.7, -1 )
collision_mask = 2
shape = SubResource( 14 )

[node name="Camera" type="Camera" parent="SpringArm"]
cull_mask = 524287
far = 8192.0

[node name="RayCast" type="RayCast" parent="SpringArm/Camera"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -0.629443 )
enabled = true
cast_to = Vector3( 0, 0, -5 )
collision_mask = 14
debug_shape_custom_color = Color( 0.721569, 0, 0, 1 )
script = SubResource( 21 )

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 1.5, 0 )
shape = SubResource( 1 )

[node name="MeshInstance" type="MeshInstance" parent="CollisionShape"]
layers = 524288
mesh = SubResource( 5 )
material/0 = null

[node name="UI" type="Control" parent="."]
pause_mode = 2
anchor_right = 1.0
anchor_bottom = 1.0
theme = ExtResource( 15 )
script = SubResource( 10 )

[node name="Control" type="Control" parent="UI"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 17 )

[node name="Label" type="Label" parent="UI/Control"]
anchor_left = 0.0078125
anchor_top = 0.08
anchor_right = 0.139648
anchor_bottom = 0.103333
margin_right = -39.0
text = "Current Attack Angle:"
__meta__ = {
"_edit_use_anchors_": true
}

[node name="Label2" type="Label" parent="UI/Control"]
anchor_left = 0.0078125
anchor_top = 0.133333
anchor_right = 0.154297
anchor_bottom = 0.156667
margin_top = -7.62939e-06
margin_right = -15.0
text = "Current attack direction"
__meta__ = {
"_edit_use_anchors_": true
}

[node name="Hud" type="Control" parent="UI"]
pause_mode = 2
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 3 )

[node name="Modifiers" type="Control" parent="UI/Hud"]
anchor_left = 0.9375
anchor_right = 1.0
anchor_bottom = 0.32
__meta__ = {
"_edit_use_anchors_": true
}

[node name="ManaBar" type="ProgressBar" parent="UI/Hud"]
anchor_left = 0.0078125
anchor_top = 0.826667
anchor_right = 0.125
anchor_bottom = 0.853333
custom_styles/fg = SubResource( 6 )
max_value = 1.0

[node name="StaminaBar" type="ProgressBar" parent="UI/Hud"]
anchor_left = 0.0078125
anchor_top = 0.88
anchor_right = 0.125
anchor_bottom = 0.906667
custom_styles/fg = SubResource( 7 )
max_value = 1.0

[node name="HealthBar" type="ProgressBar" parent="UI/Hud"]
anchor_left = 0.0078125
anchor_top = 0.933333
anchor_right = 0.125
anchor_bottom = 0.96
custom_styles/fg = SubResource( 8 )
max_value = 1.0

[node name="crosshair" type="Control" parent="UI/Hud"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -24.0
margin_top = -28.0
margin_right = 24.0
margin_bottom = 20.0

[node name="label" type="Label" parent="UI/Hud/crosshair"]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -14.0
align = 1
valign = 1

[node name="TextureRect" type="TextureRect" parent="UI/Hud/crosshair"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="ch_ranged" type="Control" parent="UI/Hud/crosshair"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="ch_melee" type="Control" parent="UI/Hud/crosshair"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="left_angle_slider" type="HSlider" parent="UI/Hud/crosshair/ch_melee"]
anchor_top = -0.167
anchor_right = 0.333
anchor_bottom = 0.667
margin_top = 40.016
margin_right = 64.016
margin_bottom = 31.984
rect_rotation = -89.9999
rect_scale = Vector2( 0.5, 0.5 )
custom_icons/grabber_disabled = SubResource( 15 )
custom_styles/grabber_area = SubResource( 19 )
min_value = -1.0
max_value = 1.0
step = 0.01
editable = false
scrollable = false
__meta__ = {
"_edit_use_anchors_": true
}

[node name="right_angle_slider" type="HSlider" parent="UI/Hud/crosshair/ch_melee"]
anchor_left = 0.666667
anchor_top = -0.167
anchor_right = 1.0
anchor_bottom = 0.667
margin_left = 16.0
margin_top = 40.016
margin_right = 80.0
margin_bottom = 31.984
rect_rotation = 90.0
rect_scale = Vector2( -0.5, 0.5 )
custom_styles/grabber_area = SubResource( 20 )
min_value = -1.0
max_value = 1.0
step = 0.01
editable = false
scrollable = false
__meta__ = {
"_edit_use_anchors_": true
}

[node name="TEMP_CONTROLS!" type="Control" parent="UI/Hud"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0

[node name="CharacterWindow" type="Control" parent="UI"]
pause_mode = 2
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 23 )

[node name="TabContainer" type="TabContainer" parent="UI/CharacterWindow"]
anchor_left = 0.312
anchor_top = 0.213
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 0.511993
margin_top = 0.199989
theme = ExtResource( 15 )
custom_styles/tab_fg = SubResource( 26 )
custom_styles/tab_bg = SubResource( 25 )
custom_styles/panel = SubResource( 24 )

[node name="Inventory" type="Control" parent="UI/CharacterWindow/TabContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = 30.0

[node name="Items" type="Control" parent="UI/CharacterWindow/TabContainer/Inventory"]
anchor_left = 0.511364
anchor_top = 0.0769231
anchor_right = 0.965909
anchor_bottom = 0.945701
__meta__ = {
"_edit_use_anchors_": true
}

[node name="BG" type="NinePatchRect" parent="UI/CharacterWindow/TabContainer/Inventory/Items"]
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 16 )

[node name="GRID" type="Panel" parent="UI/CharacterWindow/TabContainer/Inventory/Items/BG"]
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 2
size_flags_vertical = 2
custom_styles/panel = SubResource( 28 )

[node name="ScrollContainer" type="ScrollContainer" parent="UI/CharacterWindow/TabContainer/Inventory/Items/BG"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Container" type="Container" parent="UI/CharacterWindow/TabContainer/Inventory/Items/BG/ScrollContainer"]
script = SubResource( 27 )

[node name="FG" type="NinePatchRect" parent="UI/CharacterWindow/TabContainer/Inventory/Items"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Character" type="Control" parent="UI/CharacterWindow/TabContainer"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = 30.0

[node name="Quests" type="Control" parent="UI/CharacterWindow/TabContainer"]
visible = false
margin_right = 40.0
margin_bottom = 40.0

[node name="Companion_UI" type="Control" parent="UI/CharacterWindow/TabContainer"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Menus" type="Control" parent="UI"]
pause_mode = 2
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 18 )

[node name="PausedMenu" type="Control" parent="UI/Menus"]
pause_mode = 2
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Panel" type="Panel" parent="UI/Menus/PausedMenu"]
pause_mode = 2
anchor_left = 0.3125
anchor_top = 0.106667
anchor_right = 0.6875
anchor_bottom = 0.853333
__meta__ = {
"_edit_use_anchors_": true
}

[node name="continue" type="Button" parent="UI/Menus/PausedMenu/Panel"]
pause_mode = 2
anchor_left = 0.354167
anchor_top = 0.196429
anchor_right = 0.645833
anchor_bottom = 0.285714
text = "str_continue"
__meta__ = {
"_edit_use_anchors_": true
}

[node name="load" type="Button" parent="UI/Menus/PausedMenu/Panel"]
pause_mode = 2
anchor_left = 0.354167
anchor_top = 0.339286
anchor_right = 0.645833
anchor_bottom = 0.428571
text = "str_load"
__meta__ = {
"_edit_use_anchors_": true
}

[node name="options" type="Button" parent="UI/Menus/PausedMenu/Panel"]
pause_mode = 2
anchor_left = 0.354167
anchor_top = 0.482143
anchor_right = 0.645833
anchor_bottom = 0.571429
text = "str_options"
__meta__ = {
"_edit_use_anchors_": true
}

[node name="ToMenu" type="Button" parent="UI/Menus/PausedMenu/Panel"]
pause_mode = 2
anchor_left = 0.354167
anchor_top = 0.625
anchor_right = 0.645833
anchor_bottom = 0.714286
text = "str_ToMenu"
__meta__ = {
"_edit_use_anchors_": true
}

[node name="Exit" type="Button" parent="UI/Menus/PausedMenu/Panel"]
pause_mode = 2
anchor_left = 0.354167
anchor_top = 0.767857
anchor_right = 0.645833
anchor_bottom = 0.857143
text = "str_exit"
__meta__ = {
"_edit_use_anchors_": true
}

[node name="Legs_sound_player" type="AudioStreamPlayer3D" parent="."]
max_distance = 10.0

[node name="Player_combat" type="Node" parent="."]
script = SubResource( 16 )

[node name="combat" type="Node" parent="Player_combat"]
script = ExtResource( 14 )

[node name="player_movement_fsm" type="Node" parent="."]
script = ExtResource( 5 )
inertia_curve = SubResource( 12 )

[node name="Grounded" type="Node" parent="player_movement_fsm"]
script = ExtResource( 4 )

[node name="Movement" type="Node" parent="player_movement_fsm"]
script = ExtResource( 6 )

[node name="Sprint" type="Node" parent="player_movement_fsm"]
script = ExtResource( 8 )

[node name="Falling" type="Node" parent="player_movement_fsm"]
script = ExtResource( 7 )

[node name="Jumping" type="Node" parent="player_movement_fsm"]
script = ExtResource( 3 )

[node name="player_camera_state" type="Node" parent="."]
script = ExtResource( 9 )

[node name="First_person" type="Node" parent="player_camera_state"]
script = ExtResource( 13 )

[node name="Third_Person" type="Node" parent="player_camera_state"]
script = ExtResource( 10 )

[node name="Free_cam" type="Node" parent="player_camera_state"]
script = ExtResource( 12 )

[node name="player_character_data" type="Node" parent="."]
script = SubResource( 4 )

[node name="character_effects_node" type="Node" parent="player_character_data"]
script = ExtResource( 1 )

[node name="player_inventory" type="Node" parent="."]
script = SubResource( 22 )

[node name="item_container" type="Node" parent="player_inventory"]
script = ExtResource( 11 )

[node name="AnimationTree" type="AnimationTree" parent="."]
anim_player = NodePath("../AnimationPlayer")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]

[connection signal="looking_at" from="SpringArm/Camera/RayCast" to="player_inventory" method="_on_RayCast_looking_at"]
[connection signal="button_down" from="UI/Menus/PausedMenu/Panel/continue" to="UI/Menus" method="_on_continue_button_down"]
[connection signal="button_down" from="UI/Menus/PausedMenu/Panel/ToMenu" to="UI/Menus" method="_on_ToMenu_button_down"]
[connection signal="button_down" from="UI/Menus/PausedMenu/Panel/Exit" to="UI/Menus" method="_on_Exit_button_down"]
[connection signal="angle_changed" from="Player_combat/combat" to="UI/Control" method="_on_combat_angle_changed"]
[connection signal="angle_changed" from="Player_combat/combat" to="UI/Hud" method="_on_combat_angle_changed"]
[connection signal="melee_attack_direction_changed" from="Player_combat/combat" to="UI/Control" method="_on_combat_melee_attack_direction_changed"]
[connection signal="melee_attack_direction_changed" from="Player_combat/combat" to="UI/Hud" method="_on_combat_melee_attack_direction_changed"]
